import time
import json
import requests
from jwcrypto import jwk, jwt
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import base64


'''
This key has been generated using the following commands
key = jwk.JWK.generate(kty='EC', crv='P-256')
key.export()

Note that it includes the private key as well

To export in the public key and use in the configuration of IdP use
key.export_public()
'''
# This key represent the key of the cloud infrastructure
json_key = json.dumps({
    "crv":"P-256",
    "d":"TvKuAqV1y1pTlWhJ_BG9WZZvnu1n0bonuleoZDtT89k",
    "kty":"EC","x":"3qmoY1Bs0eJ319TLku5ofe7q2guicdFSIu22miBLXHY",
    "y":"gRzDzzvTGuyJp7ypFWuboC21KhsxpcpQMo9IcXSt23E"
})

jwk_key = jwk.JWK.from_json(json_key)

# Generate an RFC 7523 assertion
# In a real deployment, this assertion would have been generated by the Cloud provider
jwt_header = {
            "typ": "jwt",
            "alg": "ES256",
            "jwk":  jwk_key.export_public(as_dict=True)
        }
jwt_claims={
    "iss":"http://localhost",
    "sub":"dt@cloud.com",
    "aud":"http://localhost:6001",
    "exp": int(time.time()) + 600 #expire in 10 minutes
}

assertion = jwt.JWT(header=jwt_header, claims=jwt_claims)
assertion.make_signed_token( jwk_key)


# Generate access token request
data={
    "grant_type":"urn:ietf:params:oauth:grant-type:jwt-bearer",
    "assertion":assertion.serialize()
}

headers={
    "Content-Type":"application/x-www-form-urlencoded"
}


token_url = "http://localhost:6001/oauth2/Token"

response = requests.post(token_url, headers = headers, data = data)

if (response.status_code == 200):
    json_response = json.loads(response.text)
    print (json_response['id_token'])

'''
Create a CSR
'''


private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
csr = x509.CertificateSigningRequestBuilder().subject_name(x509.Name([
x509.NameAttribute(NameOID.COMMON_NAME, "dt@cloud.com"),
])).sign(private_key, hashes.SHA256())

fulcio_request = {
  "credentials": {
    "oidcIdentityToken": json_response['id_token']
  },
  "certificateSigningRequest":  base64.b64encode(csr.public_bytes(serialization.Encoding.PEM)).decode()
}


headers={
    "Content-Type":"application/x-www-form-urlencoded"
}


fulcio_url = "http://localhost:6002/"

response = requests.post(fulcio_url + "/api/v2/signingCert", headers = headers, data = data)